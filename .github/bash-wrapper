#!/bin/bash
#
# NAME
#
#   bash-wrapper - wrapper to run bash in a chrooted QEMU user environment.
#
# SYNOPSIS
#
#    bash-wrapper <SCRIPT>
#
# DESCRIPTION
#
#   This script can be passed as a custom shell in order to run shell commands in a foreign chroot rather
#   than on the host platform. The architecture must be specified in the CROSS_ARCH environment variable.
#   For this purpose, architecture names are as used by the operating systemâ€™s package manager (and reported
#   by dpkg --print-architecture).
#
# BUGS
#
#   Only a handful environment variables (HOME, PROJECT_EXES, USER) are passed at the moment. Special character
#   handling in environment variables is broken. This can be fixed by modifying the script itself.

CROSS_ROOT=/opt/chroot/$CROSS_ARCH

# qemu-user-static binary names uses nonstandard arch names, therefore we need to map names explicitly
case $CROSS_ARCH in
  $(dpkg --print-architecture))
    echo "$CROSS_ARCH is the host architecture." > /dev/stderr
    echo "This is currently not supported." > /dev/stderr
    echo "However, you can run this command directly on the host machine." > /dev/stderr
    exit 1
    ;;
  # TODO amd64  arm64    i386 mips64el mipsel ppc64el s390x
  # QEMU x86_64 aarch64? i386 mips64el mipsel ppc64le s390x
  armhf)
    CROSS_QUEMU=qemu-arm-static
    ;;
  *)
    echo "Unsupported architecture: $CROSS_ARCH" > /dev/stderr
    exit 1
    ;;
esac

# FIXME for some reasons, GHA passes scripts but does not set the executable flag,
# so we need to work around this.
test -f "$1" && sudo chmod a+x "$1"

sudo chroot --userspec=`whoami`:`whoami` $CROSS_ROOT $CROSS_QUEMU /bin/bash -c "export HOME=$HOME; export PROJECT_EXES=\"$PROJECT_EXES\"; export USER=$USER; cd $GITHUB_WORKSPACE; $*"

